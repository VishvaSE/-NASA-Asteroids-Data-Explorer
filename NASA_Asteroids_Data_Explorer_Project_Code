import requests
from datetime import datetime

Api_key = "hXhalm81i1qiaioezy43nTS6iAsV3K0bBthodQXV"

Ast_Details = []
Records = 10000
url = f"https://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-01&end_date=2024-01-07&api_key={Api_key}"

while len(Ast_Details) < Records:
    response = requests.get(url)

    if response.status_code != 200:
        print("Error fetching data:", response.status_code)
        break

    data = response.json()
    details = data.get('near_earth_objects', {})

    for date, asteroids in details.items():
        for ast in asteroids:
            try:
                if not ast.get('close_approach_data'):
                    continue  # Skip if no approach data

                approach = ast['close_approach_data'][0]

                est_dia = ast.get("estimated_diameter", {}).get("kilometers", {})

                Ast_Details.append(dict(
                    id=int(ast.get('id', 0)),
                    neo_reference_id=int(ast.get('neo_reference_id', 0)),
                    name=ast.get('name', 'Unknown'),
                    absolute_magnitude_h=float(ast.get('absolute_magnitude_h', 0.0)),
                    estimated_diameter_min_km=float(est_dia.get('estimated_diameter_min', 0.0)),
                    estimated_diameter_max_km=float(est_dia.get('estimated_diameter_max', 0.0)),
                    is_potentially_hazardous_asteroid=int(ast.get('is_potentially_hazardous_asteroid', False)),
                    close_approach_date=datetime.strptime(approach.get('close_approach_date'), "%Y-%m-%d").date(),
                    relative_velocity_kmph=float(approach.get('relative_velocity', {}).get('kilometers_per_hour', 0.0)),
                    astronomical=float(approach.get('miss_distance', {}).get('astronomical', 0.0)),
                    miss_distance_km=float(approach.get('miss_distance', {}).get('kilometers', 0.0)),
                    miss_distance_lunar=float(approach.get('miss_distance', {}).get('lunar', 0.0)),
                    orbiting_body=approach.get('orbiting_body', 'Unknown')
                ))

            except (KeyError, ValueError, IndexError) as e:
                print("Skipping one record due to error:", e)
                continue

            if len(Ast_Details) >= Records:
                break
        if len(Ast_Details) >= Records:
            break

    url = data['links'].get('next')
    if not url:
        print("No more pages to fetch.")
        break

print(f"\u2705 Done! Total records collected: {len(Ast_Details)}")

import pprint

pprint.pprint(Ast_Details)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

import sqlite3

connector = sqlite3.connect("nasa_asteroids.db")
cursor = connector.cursor()

cursor.execute('''
create table if not exists asteroids (
  id int,
  name varchar,
  absolute_magnitude_h float,
  estimated_diameter_min_km float,
  estimated_diameter_max_km float,
  is_potentially_hazardous_asteroid BOOLEAN
)''')

cursor.execute('''
create table if not exists close_approach (
    neo_reference_id INT,
    close_approach_date DATE,
    relative_velocity_kmph FLOAT,
    astronomical FLOAT,
    miss_distance_km FLOAT,
    miss_distance_lunar FLOAT,
    orbiting_body VARCHAR
)
''')

for ast in Ast_Details:
    cursor.execute('''
        INSERT INTO asteroids (id, name, absolute_magnitude_h,
            estimated_diameter_min_km, estimated_diameter_max_km,
            is_potentially_hazardous_asteroid)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (
        ast['id'],
        ast['name'],
        ast['absolute_magnitude_h'],
        ast['estimated_diameter_min_km'],
        ast['estimated_diameter_max_km'],
        int(ast['is_potentially_hazardous_asteroid'])
    ))
    cursor.execute('''
        INSERT INTO close_approach (neo_reference_id, close_approach_date,
            relative_velocity_kmph, astronomical, miss_distance_km,
            miss_distance_lunar, orbiting_body)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (
        ast['neo_reference_id'],
        ast['close_approach_date'].strftime('%Y-%m-%d'),
        ast['relative_velocity_kmph'],
        ast['astronomical'],
        ast['miss_distance_km'],
        ast['miss_distance_lunar'],
        ast['orbiting_body']
    ))

connector.commit()

#1 Count how many times each asteroid has approached Earth
import pandas as pd

cursor.execute ('''
SELECT neo_reference_id, COUNT(*) AS approach_count
FROM close_approach
GROUP BY neo_reference_id
ORDER BY approach_count DESC
limit 10''')

columns = [desc[0] for desc in cursor.description]
rows=cursor.fetchall()
df = pd.DataFrame(rows,columns=columns)
df

#2 Average velocity of each asteroid over multiple approaches
cursor.execute ('''
SELECT neo_reference_id, AVG(relative_velocity_kmph) AS avg_velocity
FROM close_approach
GROUP BY neo_reference_id
ORDER BY avg_velocity DESC
LIMIT 10
''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df


#3 List top 10 fastest asteroids

cursor.execute ('''
SELECT ca.neo_reference_id, a.name, MAX(ca.relative_velocity_kmph) AS max_velocity
FROM close_approach ca
JOIN asteroids a ON ca.neo_reference_id = a.id
GROUP BY ca.neo_reference_id, a.name
ORDER BY max_velocity DESC
LIMIT 10''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

#4 Find potentially hazardous asteroids that have approached Earth more than 3 times

cursor.execute ('''
SELECT ca.neo_reference_id, a.name, COUNT(*) AS approach_count
FROM close_approach ca
JOIN asteroids a ON ca.neo_reference_id = a.id
WHERE a.is_potentially_hazardous_asteroid = TRUE
GROUP BY ca.neo_reference_id, a.name
HAVING approach_count > 3''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

#5 Find the month with the most asteroid approaches

cursor.execute ('''
SELECT strftime('%Y-%m', close_approach_date) AS month, COUNT(*) AS approach_count
FROM close_approach
GROUP BY month
ORDER BY approach_count DESC
LIMIT 1''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

#6 Get the asteroid with the fastest ever approach speed

cursor.execute ('''
SELECT ca.neo_reference_id, a.name, ca.relative_velocity_kmph
FROM close_approach ca
JOIN asteroids a ON ca.neo_reference_id = a.id
ORDER BY ca.relative_velocity_kmph DESC
LIMIT 1''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

#7 Sort asteroids by maximum estimated diameter (descending)


cursor.execute ('''
SELECT id, name, estimated_diameter_max_km
FROM asteroids
ORDER BY estimated_diameter_max_km DESC''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

#8 An asteroid whose closest approach is getting nearer over time(Hint: Use ORDER BY close_approach_date and look at miss_distance).

cursor.execute ('''
SELECT neo_reference_id, close_approach_date, miss_distance_km
FROM close_approach
ORDER BY neo_reference_id, close_approach_date, miss_distance_km ASC''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

#9 Display the name of each asteroid along with the date and miss distance of its closest approach to Earth.

cursor.execute ('''
SELECT a.name, ca.close_approach_date, ca.miss_distance_km
FROM close_approach ca
JOIN asteroids a ON ca.neo_reference_id = a.id
WHERE (ca.neo_reference_id, ca.miss_distance_km) IN (
    SELECT neo_reference_id, MIN(miss_distance_km)
    FROM close_approach
    GROUP BY neo_reference_id)''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df


#10 List names of asteroids that approached Earth with velocity > 50,000 km/h

cursor.execute ('''
SELECT DISTINCT a.name, ca.relative_velocity_kmph
FROM close_approach ca
JOIN asteroids a ON ca.neo_reference_id = a.id
WHERE ca.relative_velocity_kmph > 50000''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df


#11 Count how many approaches happened per month

cursor.execute ('''
SELECT strftime('%Y-%m', close_approach_date) AS month, COUNT(*) AS approach_count
FROM close_approach
GROUP BY month
ORDER BY month''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

#12 Find asteroid with the highest brightness (lowest magnitude value)

cursor.execute ('''
SELECT id, name, absolute_magnitude_h
FROM asteroids
ORDER BY absolute_magnitude_h ASC
LIMIT 1''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

#13 Get number of hazardous vs non-hazardous asteroids

cursor.execute ('''
SELECT is_potentially_hazardous_asteroid, COUNT(*) AS count
FROM asteroids
GROUP BY is_potentially_hazardous_asteroid''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

#14 Find asteroids that passed closer than the Moon (lesser than 1 LD), along with their close approach date and distance.

cursor.execute ('''
SELECT a.name, ca.close_approach_date, ca.miss_distance_lunar
FROM close_approach ca
JOIN asteroids a ON ca.neo_reference_id = a.id
WHERE ca.miss_distance_lunar < 1''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df



#15 Find asteroids that came within 0.

cursor.execute ('''
SELECT a.name, ca.close_approach_date, ca.astronomical
FROM close_approach ca
JOIN asteroids a ON ca.neo_reference_id = a.id
WHERE ca.astronomical < 0.05
ORDER BY ca.astronomical ASC''')

columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

# 5 derive additional insights

#16  Average estimated diameter of hazardous vs non-hazardous asteroids

cursor.execute ('''
SELECT is_potentially_hazardous_asteroid,AVG((estimated_diameter_min_km + estimated_diameter_max_km) / 2) AS avg_diameter_km
FROM asteroids
GROUP BY is_potentially_hazardous_asteroid''')


columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

#17 Minimum miss distance (in km) by year

cursor.execute ('''
SELECT STRFTIME('%Y', close_approach_date) AS year,MIN(miss_distance_km) AS min_miss_distance_km
FROM close_approach
GROUP BY year
ORDER BY year''')


columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df


#18 Average relative velocity (km/h) per month

cursor.execute ('''
SELECT STRFTIME('%Y-%m', close_approach_date) AS year_month,AVG(relative_velocity_kmph) AS avg_velocity_kmph
FROM close_approach
GROUP BY year_month
ORDER BY year_month''')


columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df

#19 Count of approaches by orbiting body

cursor.execute ('''
SELECT orbiting_body, COUNT(*) AS approach_count
FROM close_approach
GROUP BY orbiting_body
ORDER BY approach_count DESC;''')


columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df


#20 Top 5 asteroids with most close approaches

cursor.execute ('''
SELECT neo_reference_id,a.name,COUNT(*) AS approach_count
FROM close_approach ca
JOIN asteroids a ON ca.neo_reference_id = a.id
GROUP BY neo_reference_id
ORDER BY approach_count DESC
LIMIT 5''')


columns = [desc[0] for desc in cursor.description]
rows = cursor.fetchall()
df = pd.DataFrame(rows, columns=columns)
df
------------------------------------------------------------------------------------------------------------------------------------------------------------------
!pip install streamlit pyngrok

%%writefile app.py
import streamlit as st
import sqlite3
import pandas as pd
import altair as alt
from datetime import date

conn = sqlite3.connect('nasa_asteroids.db')
cursor = conn.cursor()

st.title("\U0001F680 NASA Asteroids Data Explorer")


queries = {
    "1. Count how many times each asteroid has approached Earth": '''
        SELECT neo_reference_id, COUNT(*) AS approach_count
        FROM close_approach
        GROUP BY neo_reference_id
        ORDER BY approach_count DESC
        LIMIT 10
    ''',

    "2. Average velocity of each asteroid over multiple approaches": '''
        SELECT neo_reference_id, AVG(relative_velocity_kmph) AS avg_velocity
        FROM close_approach
        GROUP BY neo_reference_id
        ORDER BY avg_velocity DESC
        LIMIT 10
    ''',

    "3. Top 10 fastest asteroids by maximum speed": '''
        SELECT a.name, MAX(ca.relative_velocity_kmph) AS max_velocity
        FROM close_approach ca
        JOIN asteroids a ON ca.neo_reference_id = a.id
        GROUP BY ca.neo_reference_id
        ORDER BY max_velocity DESC
        LIMIT 10
    ''',

    "4. Potentially hazardous asteroids that approached Earth >3 times": '''
        SELECT a.name, COUNT(*) as approach_count
        FROM close_approach ca
        JOIN asteroids a ON ca.neo_reference_id = a.id
        WHERE a.is_potentially_hazardous_asteroid = 1
        GROUP BY ca.neo_reference_id
        HAVING approach_count > 3
    ''',

    "5. Month with the most asteroid approaches": '''
        SELECT strftime('%Y-%m', close_approach_date) AS month, COUNT(*) AS approach_count
        FROM close_approach
        GROUP BY month
        ORDER BY approach_count DESC
        LIMIT 1
    ''',

    "6. Asteroid with the fastest ever approach speed": '''
        SELECT a.name, ca.relative_velocity_kmph
        FROM close_approach ca
        JOIN asteroids a ON ca.neo_reference_id = a.id
        ORDER BY ca.relative_velocity_kmph DESC
        LIMIT 1
    ''',

    "7. Sort asteroids by maximum estimated diameter (descending)": '''
        SELECT name, estimated_diameter_max_km
        FROM asteroids
        ORDER BY estimated_diameter_max_km DESC
        LIMIT 10
    ''',

    "8. Asteroids with decreasing closest approach distance over time": '''
        SELECT a.name, ca.close_approach_date, ca.miss_distance_km
        FROM close_approach ca
        JOIN asteroids a ON ca.neo_reference_id = a.id
        ORDER BY a.name, ca.close_approach_date, ca.miss_distance_km ASC
        LIMIT 10
    ''',

    "9. Closest approach date and miss distance for each asteroid": '''
        SELECT a.name, MIN(ca.miss_distance_km) AS closest_distance, ca.close_approach_date
        FROM close_approach ca
        JOIN asteroids a ON ca.neo_reference_id = a.id
        GROUP BY a.name
        ORDER BY closest_distance ASC
        LIMIT 10
    ''',

    "10. Asteroids with approach velocity > 50,000 km/h": '''
        SELECT a.name, ca.relative_velocity_kmph
        FROM close_approach ca
        JOIN asteroids a ON ca.neo_reference_id = a.id
        WHERE ca.relative_velocity_kmph > 50000
        ORDER BY ca.relative_velocity_kmph DESC
        LIMIT 10
    ''',

    "11. Number of approaches per month": '''
        SELECT strftime('%Y-%m', close_approach_date) AS month, COUNT(*) AS approach_count
        FROM close_approach
        GROUP BY month
        ORDER BY month
    ''',

    "12. Asteroid with highest brightness (lowest magnitude value)": '''
        SELECT name, MIN(absolute_magnitude_h) AS highest_brightness
        FROM asteroids
    ''',

    "13. Count of hazardous vs non-hazardous asteroids": '''
        SELECT is_potentially_hazardous_asteroid, COUNT(*) as count
        FROM asteroids
        GROUP BY is_potentially_hazardous_asteroid
    ''',

    "14. Asteroids that passed closer than the Moon (<1 LD)": '''
        SELECT a.name, ca.close_approach_date, ca.miss_distance_lunar
        FROM close_approach ca
        JOIN asteroids a ON ca.neo_reference_id = a.id
        WHERE ca.miss_distance_lunar < 1
        ORDER BY ca.miss_distance_lunar ASC
        LIMIT 10
    ''',

    "15. Asteroids that came within 0.05 AU": '''
        SELECT a.name, ca.close_approach_date, ca.astronomical
        FROM close_approach ca
        JOIN asteroids a ON ca.neo_reference_id = a.id
        WHERE ca.astronomical < 0.05
        ORDER BY ca.astronomical ASC
        LIMIT 10
    ''',

    "16. Average miss distance (in km) for each asteroid": '''
        SELECT neo_reference_id, AVG(miss_distance_km) AS avg_miss_distance
        FROM close_approach
        GROUP BY neo_reference_id
        ORDER BY avg_miss_distance ASC
        LIMIT 10
    ''',

    "17. Asteroids with max estimated diameter > 1 km": '''
        SELECT name, estimated_diameter_max_km
        FROM asteroids
        WHERE estimated_diameter_max_km > 1
        ORDER BY estimated_diameter_max_km DESC
        LIMIT 10
    ''',

    "18. Earliest recorded approach for each asteroid": '''
        SELECT a.name, MIN(ca.close_approach_date) AS first_approach
        FROM close_approach ca
        JOIN asteroids a ON ca.neo_reference_id = a.id
        GROUP BY a.name
        ORDER BY first_approach ASC
        LIMIT 10
    ''',

    "19. Latest recorded approach for each asteroid": '''
        SELECT a.name, MAX(ca.close_approach_date) AS last_approach
        FROM close_approach ca
        JOIN asteroids a ON ca.neo_reference_id = a.id
        GROUP BY a.name
        ORDER BY last_approach DESC
        LIMIT 10
    ''',

    "20. Top 10 asteroids with highest average approach speed": '''
        SELECT a.name, AVG(ca.relative_velocity_kmph) AS avg_velocity
        FROM close_approach ca
        JOIN asteroids a ON ca.neo_reference_id = a.id
        GROUP BY a.name
        ORDER BY avg_velocity DESC
        LIMIT 10
    '''
}

# Sidebar dropdown to select query
selected_query_name = st.sidebar.selectbox("U0001F4CA Select a predefined SQL query:", list(queries.keys()))
selected_query = queries[selected_query_name]

# Button to run selected query
if st.sidebar.button("Run Query"):
    df = pd.read_sql_query(selected_query, conn)
    st.dataframe(df)

    # Show visualisation if applicable
    if 'velocity' in df.columns[-1]:
        st.subheader("Velocity Chart")
        chart = alt.Chart(df).mark_bar().encode(
            x=alt.X(df.columns[0], title='Asteroid ID / Name'),
            y=alt.Y(df.columns[-1], title='Velocity (km/h)'),
            tooltip=list(df.columns)
        ).properties(width=600)
        st.altair_chart(chart, use_container_width=True)

# Filters section
st.sidebar.header("\U0001F50E Filters")

start_date = st.sidebar.date_input("Start Date", value=date(2024, 1, 1))
end_date = st.sidebar.date_input("End Date", value=date(2024, 12, 31))
min_velocity = st.sidebar.slider("Minimum Velocity (km/h)", 0, 100000, 0)
max_velocity = st.sidebar.slider("Maximum Velocity (km/h)", 0, 100000, 100000)
hazardous_only = st.sidebar.checkbox("Show only hazardous asteroids")

# Filtered query execution
if st.sidebar.button("Run Filtered Search"):
    query = '''
    SELECT a.name, ca.close_approach_date, ca.relative_velocity_kmph, ca.miss_distance_lunar
    FROM close_approach ca
    JOIN asteroids a ON ca.neo_reference_id = a.id
    WHERE ca.close_approach_date BETWEEN ? AND ?
      AND ca.relative_velocity_kmph BETWEEN ? AND ?
    '''
    params = [start_date, end_date, min_velocity, max_velocity]

    if hazardous_only:
        query += " AND a.is_potentially_hazardous_asteroid = 1"

    query += " ORDER BY ca.relative_velocity_kmph DESC LIMIT 100"

    df_filtered = pd.read_sql_query(query, conn, params=params)
    st.dataframe(df_filtered)

    if not df_filtered.empty:
        st.subheader("Filtered Velocity Distribution")
        chart = alt.Chart(df_filtered).mark_circle(size=60).encode(
            x='relative_velocity_kmph',
            y='miss_distance_lunar',
            color=alt.Color('name', legend=None),
            tooltip=['name', 'relative_velocity_kmph', 'miss_distance_lunar']
        ).interactive()
        st.altair_chart(chart, use_container_width=True)

st.markdown("Developed by Vishva S E")


conn.close()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Kill any existing streamlit processes to avoid conflicts
!pkill -f streamlit

!pkill -f streamlit
!pkill -f ngrok

from pyngrok import ngrok
import subprocess
import time

# Start streamlit app in background
process = subprocess.Popen(['streamlit', 'run', 'app.py'])

# Wait for Streamlit to start
time.sleep(5)

# Open tunnel to http://localhost:8501
public_url = ngrok.connect("http://localhost:8501")
print(f"Your Streamlit app is live here:\n{public_url}")

!ls
